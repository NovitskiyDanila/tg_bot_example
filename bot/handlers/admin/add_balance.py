import logging
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from database.session import async_session
from database.models import User
from filters.admin_filter import AdminFilter

logger = logging.getLogger(__name__)


# FSM –¥–ª—è —ç—Ç–∞–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class BalanceChange(StatesGroup):
    waiting_for_confirmation = State()

def register_add_balance_handlers(router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_balance.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_balance <tg_id_or_username> <amount>
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ amount —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π Confirm/Cancel,
    –≥–¥–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ amount:
      - –ï—Å–ª–∏ amount > 0: "–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ..."
      - –ï—Å–ª–∏ amount < 0: "–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ..."
    """
    @router.message(Command("add_balance"), AdminFilter())
    async def add_balance_handler(message: types.Message, state: FSMContext):
        if not message.text:
            await message.answer(
                "Usage: /add_balance <tg_id_or_username> <amount>\n"
                "Amount must be an integer (positive to add, negative to subtract)."
            )
            return

        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                "Usage: /add_balance <tg_id_or_username> <amount>\n"
                "Amount must be an integer (positive to add, negative to subtract)."
            )
            return

        identifier = parts[1].strip()
        if identifier.startswith('@'):
            identifier = identifier[1:]
        try:
            amount = int(parts[2])
        except ValueError:
            await message.answer("Invalid amount. Amount must be an integer.")
            return

        async with async_session() as session:
            if identifier.isdigit():
                query = select(User).where(User.tg_id == int(identifier))
            else:
                query = select(User).where(User.username.ilike(identifier))
            result = await session.execute(query)
            target_user = result.scalar_one_or_none()

        if not target_user:
            await message.answer("User with this identifier not found.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ amount
        if amount > 0:
            action_text = f"–¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            amount_text = f"{amount}$"
        else:
            action_text = f"—Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            amount_text = f"{abs(amount)}$"

        confirmation_text = (
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ {action_text}  @{target_user.username} "
            f"(tg id: {target_user.tg_id}) {amount_text}?"
        )

        confirmation_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ Confirm", callback_data="confirm_balance"),
                InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_balance")
            ]
        ])

        await state.update_data(identifier=identifier, amount=amount)
        await message.answer(confirmation_text, reply_markup=confirmation_kb)
        await state.set_state(BalanceChange.waiting_for_confirmation)

    @router.callback_query(lambda cb: cb.data in ("confirm_balance", "cancel_balance"), BalanceChange.waiting_for_confirmation, AdminFilter())
    async def balance_confirmation_callback(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        identifier = data.get("identifier")
        amount = data.get("amount")

        async with async_session() as session:
            if identifier.isdigit():
                query = select(User).where(User.tg_id == int(identifier))
            else:
                query = select(User).where(User.username.ilike(identifier))
            result = await session.execute(query)
            target_user = result.scalar_one_or_none()
            if not target_user:
                await callback.message.edit_text("User not found in DB.")
                await state.clear()
                await callback.answer()
                return

            if callback.data == "cancel_balance":
                await callback.message.edit_text("Balance change operation cancelled.")
                await state.clear()
                await callback.answer()
                return

            # –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ balance (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ float)
            try:
                target_user.balance = target_user.balance + amount * 100
                await session.commit()
            except Exception as e:
                logging.info(f"ERROR: {e}")
                await session.rollback()
                await callback.message.answer("An error occurred while changing balance, please try again. üôÇ")

        await callback.message.edit_text(
            f"Balance of user @{target_user.username} (tg id: {target_user.tg_id}) updated by {amount}$."
        )
        await state.clear()
        await callback.answer()

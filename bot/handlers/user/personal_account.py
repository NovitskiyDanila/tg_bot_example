import logging
from aiogram import types, F, Bot
from sqlalchemy import select, func
from database.session import async_session
from database.models import User, Purchase, Deposit

logger = logging.getLogger(__name__)


def build_personal_account_keyboard() -> types.InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      - –†—è–¥ 1: Deposit
      - –†—è–¥ 2: Last deposits, Last purchases
      - –†—è–¥ 3: My bots
    """
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üíµ Deposit", callback_data="deposit"),
         types.InlineKeyboardButton(text="üí≥ Withdraw", callback_data="withdraw")],
        [
            types.InlineKeyboardButton(text="üí∞ My deposits", callback_data="my_deposits"),
            types.InlineKeyboardButton(text="üõí My purchases", callback_data="my_purchases")
        ],
        [types.InlineKeyboardButton(text="ü§ñ My bots", callback_data="my_bots")]
    ])
    return kb


async def get_personal_account_info(user: User, bot: Bot) -> tuple:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (text, reply_markup) –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ –ë–î –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏
    —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫
    async with async_session() as session:

        amount_of_deposits_result = await session.execute(
            select(func.sum(Deposit.amount)).where(Deposit.user_id == user.id, Deposit.status == "confirmed")
        )
        total_deposit = amount_of_deposits_result.scalar() or 0

        amount_of_purchases_result = await session.execute(
            select(func.sum(Purchase.amount)).where(Purchase.user_id == user.id)
        )

        total_purchase = amount_of_purchases_result.scalar() or 0

        purchase_result = await session.execute(
            select(func.count()).select_from(Purchase).where(Purchase.user_id == user.id)
        )
        purchase_quantity = purchase_result.scalar() or 0

        referrals_result = await session.execute(
            select(func.count()).select_from(User).where(User.referrer_id == user.id)
        )
        referrals_count = referrals_result.scalar() or 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
    try:
        bot_info = await bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start={user.tg_id}"
        text = (
            f"üë§ <b>User:</b> @{user.username}\n"
            f"ü™™ <b>ID:</b> {user.tg_id}\n"
            f"üîó <b>Referral link:</b> <code><i>{referral_link}</i></code>\n"
            f"üí∞ <b>Balance:</b> {float(user.balance / 100)}$\n"
            f"üí∞ <b>Bonus balance:</b> {float(user.bonus_balance / 100)}$\n"
            f"üí∏ <b>Amount of deposits:</b> {float(total_deposit / 100)}$\n"
            f"üí∏ <b>Amount of purchases:</b> {float(total_purchase / 100)}$\n"
            f"üìä <b>Purchase quantity:</b> {purchase_quantity}\n"
            f"üë§ <b>Amount of referrals:</b> {referrals_count}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        kb = build_personal_account_keyboard()
        return text, kb
    except Exception as e:
        logging.info("Bot doesn't exist ERROR")



def register_personal_account_handlers(router) -> None:
    @router.message(F.text == "‚Ñπ Personal account")
    async def personal_account_handler(message: types.Message):
        user_tg_id = message.from_user.id
        async with async_session() as session:
            result = await session.execute(
                select(User).where(User.tg_id == user_tg_id)
            )
            user = result.scalar_one_or_none()

        if not user:
            await message.answer("User not found. Please, send /start.")
            return

        text, kb = await get_personal_account_info(user, message.bot)
        await message.answer(text, reply_markup=kb, parse_mode="HTML")
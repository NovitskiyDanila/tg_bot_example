import logging
from datetime import datetime

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select, update, func

from database.session import async_session
from database.models import Item, ItemCategory, User, Purchase  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Items –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Item

logger = logging.getLogger(__name__)


class ItemBuy(StatesGroup):
    waiting_for_area = State()
    waiting_for_category = State()
    waiting_for_item = State()
    waiting_for_weight = State()
    waiting_for_bonus_usage = State()
    waiting_for_bonus_decision = State()
    waiting_for_bonus_amount = State()
    waiting_for_confirmation = State()


async def get_user_by_callback(callback: types.CallbackQuery):
    try:
        async with async_session() as session:
            user_query = await session.execute(select(User).where(User.tg_id == callback.from_user.id))
            user = user_query.scalar_one_or_none()
            return user
    except Exception as e:
        await callback.answer("User not registered")
        return None


async def get_new_item(state: FSMContext):
    state_data = await state.get_data()
    selected_item_name = state_data.get("selected_item_name")
    selected_item_weight = state_data.get("selected_item_weight")
    selected_item_area = state_data.get("selected_item_area")
    selected_item_category_id = state_data.get("selected_category_id")
    selected_item_price = state_data.get("selected_item_price")

    try:
        async with async_session() as session:
            result = await session.execute(
                select(Item)
                .where(
                    Item.area == selected_item_area,
                    Item.category_id == selected_item_category_id,
                    Item.item_name == selected_item_name,
                    Item.weight == selected_item_weight,
                    Item.price == selected_item_price,
                    Item.is_bought == False,
                    Item.is_deleted == False
                )
            )
            selected_item = result.scalars().first()
            return selected_item
    except Exception as e:
        logging.info(f"BUILDING CONFIRMATION KEYBOARD ERROR: {e}")



async def can_use_bonus(user_tg_id: int) -> bool:
    async with async_session() as session:
        user_result = await session.execute(select(User).where(User.tg_id == user_tg_id))
        user = user_result.scalar_one_or_none()

        purchases_result = await session.execute(
            select(func.count(Purchase.id)).where(Purchase.user_id == user.id)
        )
        purchase_count = purchases_result.scalar() or 0
        return purchase_count > 4


async def get_item_by_id(item_id):
    try:
        async with async_session() as session:
            item_query = await session.execute(select(Item).where(Item.id == item_id, Item.is_bought == False, Item.is_deleted == False))
            item = item_query.scalars().first()
            return item
    except Exception as e:
        logging.info(f"ERROR: {e}")
        return None


async def process_purchase(state: FSMContext, callback: types.CallbackQuery, new_balance: int, new_bonus_balance: int = 0):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞.
    –ï—Å–ª–∏ use_bonus == True, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –±–æ–Ω—É—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ü–µ–Ω—ã.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É, —Ç–∞–∫ –∏ –∏—Ç–æ–≥–æ–≤—É—é (–ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤).
    """

    state_data = await state.get_data()
    item_id = state_data.get("selected_item_id")
    curr_user = await get_user_by_callback(callback)
    selected_item = await get_item_by_id(item_id)

    if not selected_item:
        selected_item = await get_new_item(state)
        if not selected_item:
            await callback.message.delete()
            await callback.message.answer("‚ùå This item was purchased by another user.")
            await state.clear()
            return

    try:
        async with async_session.begin() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏
            await session.execute(
                update(Item)
                .where(Item.id == selected_item.id)
                .values(is_bought=True, purchase_date=datetime.utcnow())
            )
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ (amount –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –∏—Ç–æ–≥–æ–≤—É—é)
            purchase = Purchase(
                user_id=curr_user.id,
                item_id=selected_item.id,
                amount=selected_item.price  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            )
            session.add(purchase)
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(
                update(User)
                .where(User.id == curr_user.id)
                .values(balance=new_balance,
                        bonus_balance=new_bonus_balance)
            )

            await session.commit()
            await callback.answer()

    except Exception as e:
        await session.rollback()
        logger.error(f"Error during purchase transaction: {e}")
        await callback.message.answer("An error occurred while completing your purchase. Please, try again")
        return

        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ:
    await callback.message.answer("Purchase completed successfully!")
    await callback.message.answer(f"******ITEM CARD******\n"
                                  f"üÜî <b>Purchase ID:</b> <code>{selected_item.id}</code>\n"
                                  f"üõç <b>Product</b>: {selected_item.item_name} \n"
                                  f"‚öñÔ∏è <b>Weight</b>: {selected_item.weight}\n"
                                  f"üèò <b>Area</b>: {selected_item.area}\n"
                                  f"üìÑ <b>Location description</b>: {selected_item.description2}", parse_mode='HTML')
    if selected_item.photo2:
        await callback.message.answer_photo(photo=selected_item.photo2)
    if selected_item.photo3:
        await callback.message.answer_photo(photo=selected_item.photo3)
    if selected_item.photo4:
        await callback.message.answer_photo(photo=selected_item.photo4)

    return purchase


async def build_buy_keyboard(state: FSMContext):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≥–æ—Ä–æ–¥ (area),
    –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ 2 –≤ —Ä—è–¥. –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∞ Cancel.
    """
    try:
        async with async_session() as session:

            result = await session.execute(
                select(Item.area)
                .where(Item.is_bought == False, Item.is_deleted == False)
                .group_by(Item.area)
            )
            areas = [row[0] for row in result.all()]

    except Exception as e:
        logger.error(f"Error during purchase transaction: {e}")
        return

    builder = InlineKeyboardBuilder()
    for i in range(0, len(areas), 2):
        row_buttons = []
        for area in areas[i:i+2]:
            row_buttons.append(
                types.InlineKeyboardButton(text='üè† ' + area, callback_data=f"buy_area_{area}")
            )
        builder.row(*row_buttons)
    builder.row(
        types.InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_buying")
    )
    if len(areas) > 0:
        text = "üõç Choose the area where you want to buy the product"
    else:
        text = "All items are currently out of stock"

    await state.set_state(ItemBuy.waiting_for_area)

    return builder.as_markup(), text


async def build_category_keyboard(area: str, state: FSMContext):

    try:
        async with async_session() as session:
            result = await session.execute(
                select(ItemCategory.id, ItemCategory.category_name)
                .join(Item, ItemCategory.id == Item.category_id)
                .where(
                    Item.area == area,
                    Item.is_bought == False,
                    Item.is_deleted == False
                )
                .group_by(ItemCategory.id, ItemCategory.category_name)
            )
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç—Ä–æ–∫)
        categories = [(row[0], row[1]) for row in result.all()]
    except Exception as e:
        logger.error(f"Error during purchase transaction: {e}")
        return

    await state.update_data(selected_item_area=area)
    await state.update_data(area_categories=categories)

    # –°—Ç—Ä–æ–∏–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ + –∫–Ω–æ–ø–∫–∏ Back –∏ Cancel
    builder = InlineKeyboardBuilder()
    for i in range(0, len(categories), 2):
        row_buttons = []
        for category in categories[i:i + 2]:
            cat_id, cat_name = category  # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
            row_buttons.append(
                types.InlineKeyboardButton(text='üì¶ ' + cat_name, callback_data=f"buy_category_{cat_id}")
            )
        builder.row(*row_buttons)
    builder.row(
        types.InlineKeyboardButton(text="üîô Back", callback_data="back_buy_area")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_buying")
    )

    if len(categories) > 0:
        text = f"üõç The following categories are available in the area of <b>{area}</b>:"
    else:
        text = "There are no items available right now"

    await state.set_state(ItemBuy.waiting_for_category)

    return builder.as_markup(), text


async def build_item_keyboard(category_id, state: FSMContext):

    state_data = await state.get_data()
    area = state_data.get("selected_item_area")
    area_categories = state_data.get("area_categories")
    category_name = next((name for id_, name in area_categories if id_ == category_id), None)

    try:
        async with async_session() as session:
            result = await session.execute(
                select(Item.item_name)
                .where(
                    Item.area == area,
                    Item.category_id == category_id,
                    Item.is_bought == False,
                    Item.is_deleted == False
                )
                .group_by(Item.item_name)
            )
            items: list = [row[0] for row in result.all()]
        logger.info(f"Current parameters: area = {area}, category_id: {category_id}, category_name: {category_name}, items: {items} ")
    except Exception as e:
        logger.error(f"Error during purchase transaction: {e}")
        return

    builder = InlineKeyboardBuilder()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    if len(items) > 0:
        text = f"üõç The following products are available in the area of <b>{area}</b> in category <b>{category_name}</b>"
    else:
        text = "There are no items available right now"

    for i in range(0, len(items), 2):
        row_buttons = []
        for item_name in items[i:i + 2]:
            row_buttons.append(
                types.InlineKeyboardButton(text=item_name, callback_data=f"buy_item_{item_name}")
            )
        builder.row(*row_buttons)
    # –ö–Ω–æ–ø–∫–∞ Back: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–∂–µ–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
    builder.row(
        types.InlineKeyboardButton(text="üîô Back", callback_data="back_buy_category")
    )
    # –ö–Ω–æ–ø–∫–∞ Cancel
    builder.row(
        types.InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_buying")
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å—à–µ
    await state.update_data(selected_category_name=category_name, selected_category_id=category_id)
    await state.set_state(ItemBuy.waiting_for_item)

    return builder.as_markup(), text


async def build_weights_keyboard(selected_item_name, state: FSMContext):

    state_data = await state.get_data()
    selected_item_area = state_data.get("selected_item_area")
    selected_category_id = state_data.get("selected_category_id")

    try:
        async with async_session() as session:
            result = await session.execute(
                select(Item.weight)
                .where(
                    Item.area == selected_item_area,
                    Item.category_id == selected_category_id,
                    Item.item_name == selected_item_name,
                    Item.is_bought == False,
                    Item.is_deleted == False
                ).group_by(Item.weight)
            )
            selected_item_weights = [row[0] for row in result.all()]
    except Exception as e:
        logging.info(f"ERROR: {e}")
        return None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    text = f"üõç How much do you want to buy"
    builder = InlineKeyboardBuilder()
    for i in range(0, len(selected_item_weights), 2):
        row_buttons = []
        for item_weight in selected_item_weights:
            row_buttons.append(
                types.InlineKeyboardButton(text=item_weight, callback_data=f"buy_weight_{item_weight}")
            )
        builder.row(*row_buttons)
    # –ö–Ω–æ–ø–∫–∞ Back: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–∂–µ–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
    builder.row(
        types.InlineKeyboardButton(text="üîô Back", callback_data="back_buy_item")
    )
    # –ö–Ω–æ–ø–∫–∞ Cancel
    builder.row(
        types.InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_buying")
    )

    await state.set_state(ItemBuy.waiting_for_weight)
    return builder.as_markup(), text


async def build_confirmation_keyboard(selected_item_weight, state: FSMContext):
    await state.update_data(selected_item_weight=selected_item_weight)
    state_data = await state.get_data()
    logging.debug(f"state data: {state_data}")
    selected_item_area = state_data.get("selected_item_area")
    selected_category_id = state_data.get("selected_category_id")
    selected_item_name = state_data.get("selected_item_name")

    try:
        async with async_session() as session:
            result = await session.execute(
                select(Item)
                .where(
                    Item.area == selected_item_area,
                    Item.category_id == selected_category_id,
                    Item.item_name == selected_item_name,
                    Item.weight == selected_item_weight,
                    Item.is_bought == False,
                    Item.is_deleted == False
                )
            )
            selected_item = result.scalars().first()
    except Exception as e:
        logging.info(f"BUILDING CONFIRMATION KEYBOARD ERROR: {e}")
    if selected_item is None:
        text = "item not available"
        photo = None
    else:
        selected_item_price = selected_item.price
        selected_item_description1 = selected_item.description1
        await state.update_data(selected_item_id=selected_item.id)
        await state.update_data(selected_item_price=selected_item_price)



        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
        text = (f"üõç <b>Product</b>: {selected_item_name} \n"
                f"‚öñÔ∏è <b>Weight</b>: {selected_item_weight}\n"
                f"üèò <b>Area</b>: {selected_item_area}\n"
                f"üí¥ <b>Price</b>: {float(selected_item_price / 100)}$ \n"
                f"üìÑ <b>Description</b>: {selected_item_description1}")
        photo = selected_item.photo1
        logger.debug("Selected item found and state updated.")

    builder = InlineKeyboardBuilder()

    builder.row(
        types.InlineKeyboardButton(text="üí≤Buy", callback_data="buy_confirmation"),
        types.InlineKeyboardButton(text="üîôBack", callback_data="back_buy_confirmation")
    )

    await state.set_state(ItemBuy.waiting_for_confirmation)
    return photo, builder.as_markup(), text


def register_buy_handlers(router) -> None:

    @router.message(F.text == "üí≤ Buy")
    async def buy_handler(message: types.Message, state: FSMContext):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ Item:

        result = await build_buy_keyboard(state)
        if result is None:
            if not keyboard:
                await message.answer("Unfortunately there are no products available at the moment üòî1")
                await state.clear()
                return
        keyboard, text = result

        await message.answer(text=text, reply_markup=keyboard)

    @router.callback_query(F.data == "back_buy_area", ItemBuy.waiting_for_category)
    async def return_to_buy_handler(callback: types.CallbackQuery, state: FSMContext):
        result = await build_buy_keyboard(state)

        if result is None:
            await callback.message.delete()
            await callback.message.answer("Unfortunately there are no products available at the moment üòî 2")
            await state.clear()
            return

        areas_keyboard, text = result

        await callback.message.edit_text(text=text, reply_markup=areas_keyboard)

    @router.callback_query(F.data.startswith('buy_area_'), ItemBuy.waiting_for_area)
    async def buy_area_selected(callback: types.CallbackQuery, state: FSMContext):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ area –∏–∑ callback data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "buy_area_Moscow" -> "Moscow"
        area = str(callback.data.split("_")[-1])
        logger.info(f"Selected area: {area}")

        result = await build_category_keyboard(area, state)

        if result is None:
            await callback.message.delete()
            await callback.message.anwer(text="Unfortunately there are no products available at the moment 3")
            await state.clear()
            return

        category_keyboard, text = result

        await callback.message.edit_text(
            text=text,
            reply_markup=category_keyboard,
            parse_mode="HTML"
        )

    @router.callback_query(F.data == "back_buy_category", ItemBuy.waiting_for_item)
    async def return_to_category_handler(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_item_area = state_data.get("selected_item_area")

        result = await build_category_keyboard(selected_item_area, state)

        if result is None:
            await callback.message.delete()
            await callback.message.answer("Unfortunately there are no products available at the moment 4")
            await state.clear()

        item_keyboard, item_text = result

        await callback.message.edit_text(text=item_text, reply_markup=item_keyboard, parse_mode='HTML')

    @router.callback_query(F.data.startswith('buy_category_'), ItemBuy.waiting_for_category)
    async def buy_category_selected(callback: types.CallbackQuery, state: FSMContext):

        category_id = int(callback.data.split("_")[-1])
        result = await build_item_keyboard(category_id, state)

        if result is None:
            await callback.message.delete()
            await callback.message.answer("Unfortunately there are no products available at the moment 5")
            return
        items_keyboard, item_text = result
        await callback.message.edit_text(item_text, reply_markup=items_keyboard, parse_mode="HTML")
        await callback.answer()

    @router.callback_query(F.data == "back_buy_item", ItemBuy.waiting_for_weight)
    async def return_to_item_handler(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_category_id = state_data.get("selected_category_id")
        result = await build_item_keyboard(selected_category_id, state)
        items_keyboard, text = result
        await callback.message.edit_text(text, reply_markup=items_keyboard, parse_mode='HTML')
        await callback.answer()

    @router.callback_query(F.data.startswith('buy_item_'), ItemBuy.waiting_for_item)
    async def buy_item_selected(callback: types.CallbackQuery, state: FSMContext):
        selected_item_name = callback.data.split('_')[-1]
        await state.update_data(selected_item_name=selected_item_name)
        kb, text = await build_weights_keyboard(selected_item_name, state)
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()

    @router.callback_query(F.data == "back_buy_confirmation", ItemBuy.waiting_for_confirmation)
    async def return_to_weight_handler(callback: types.CallbackQuery, state: FSMContext):

        state_data = await state.get_data()
        selected_item_name = state_data.get("selected_item_name")

        weights_kb, weights_text = await build_weights_keyboard(selected_item_name,state)

        await callback.message.delete()
        await callback.message.answer(weights_text, reply_markup=weights_kb, parse_mode='HTML')

    @router.callback_query(F.data.startswith('buy_weight_'), ItemBuy.waiting_for_weight)
    async def buy_weight_selected(callback: types.CallbackQuery, state: FSMContext):
        selected_item_weight = callback.data.split('_')[-1]

        selected_item_photo, selected_item_kb, selected_item_text = await build_confirmation_keyboard(selected_item_weight, state)
        if selected_item_photo is None:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîôBack", callback_data="back_buy_confirmation"))
            await callback.message.edit_text(text="Item not found. Please go back and select a different one.", reply_markup=builder.as_markup())
        else:
            await callback.message.delete()
            await callback.message.answer_photo(photo=selected_item_photo, caption=selected_item_text, reply_markup=selected_item_kb,
                                                parse_mode='HTML')

    @router.callback_query(F.data == "back_bonus_usage", ItemBuy.waiting_for_bonus_decision)
    async def return_to_confirmation(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_item_weight = state_data.get("selected_item_weight")
        selected_item_photo, selected_item_kb, selected_item_text = await build_confirmation_keyboard(selected_item_weight, state)

        await callback.message.delete()
        if selected_item_photo is None:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîôBack", callback_data="back_buy_confirmation"))
            await callback.message.delete()
            await callback.message.anwer(text="Item not found. Please go back and select a different one.", reply_markup=builder.as_markup())
        else:
            await callback.message.answer_photo(photo=selected_item_photo, caption=selected_item_text,
                                                reply_markup=selected_item_kb,
                                                parse_mode='HTML')

    @router.callback_query(F.data == 'buy_confirmation', ItemBuy.waiting_for_confirmation)
    async def buy_complete(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_item_id = state_data.get("selected_item_id")
        selected_item = await get_item_by_id(selected_item_id)
        curr_user = await get_user_by_callback(callback)

        if not curr_user:
            await callback.message.delete()
            await callback.answer("User not registered")
            await state.clear()
            return

        if not selected_item:
            selected_item = await get_new_item(state)
            if not selected_item:
                await callback.message.delete()
                await callback.message.answer("‚ùå The item was purchased by another user.")
                await state.clear()
                return

        selected_item_photo1 = selected_item.photo1


        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤)
        if await can_use_bonus(callback.from_user.id):
            if curr_user.balance + curr_user.bonus_balance < selected_item.price:
                await callback.message.answer("Insufficient funds to complete the purchase.")
                await callback.answer()
                return

        elif curr_user.balance < selected_item.price:
            await callback.message.answer("Insufficient funds to complete the purchase.")
            await callback.answer()
            return

        if curr_user.bonus_balance > 0 and await can_use_bonus(callback.from_user.id):
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–æ–Ω—É—Å—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∏—Ö.
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(text="‚úÖ Yes", callback_data="use_bonus_balance"),
                types.InlineKeyboardButton(text="‚ùå No", callback_data="dont_use_bonus_balance")
            )
            builder.row(types.InlineKeyboardButton(text="üîô Back", callback_data="back_bonus_usage"))
            builder.row(types.InlineKeyboardButton(text="‚ùå Cancel", callback_data="cancel_buying"))
            # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.
            current_caption = callback.message.caption
            new_caption = current_caption + "\n\nDo you want to use your bonus balance?"

            await callback.message.answer_photo(selected_item_photo1, new_caption, reply_markup=builder.as_markup())
            await state.set_state(ItemBuy.waiting_for_bonus_decision)
            await callback.answer()
        else:
            # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É
            new_balance = curr_user.balance - selected_item.price
            await process_purchase(state, callback, new_balance)

    @router.callback_query(F.data == "use_bonus_balance", ItemBuy.waiting_for_bonus_decision)
    async def bonus_used_purchase(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_item_id = state_data.get("selected_item_id")
        selected_item = await get_item_by_id(selected_item_id)
        curr_user = await get_user_by_callback(callback)

        if not curr_user:
            await callback.message.delete()
            await callback.message.answer("User not registered. Please send /start command")
            await state.clear()

        if not selected_item:
            selected_item = await get_new_item(state)
            if not selected_item:
                await callback.message.delete()
                await callback.message.answer("‚ùå The item was purchased by another user.")
                await state.clear()
                return

        if selected_item.price >= curr_user.bonus_balance:
            new_balance = curr_user.balance - selected_item.price + curr_user.bonus_balance
            await process_purchase(state, callback, new_balance)

        else:
            new_balance = curr_user.balance
            new_bonus_balance = curr_user.bonus_balance - selected_item.price
            await process_purchase(state, callback, new_balance, new_bonus_balance)

    @router.callback_query(F.data == "dont_use_bonus_balance")
    async def bonus_dont_used_purchase(callback: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_item_id = state_data.get("selected_item_id")
        selected_item = await get_item_by_id(selected_item_id)
        curr_user = await get_user_by_callback(callback)

        if not curr_user:
            await callback.message.delete()
            await callback.message.answer("User not registered")
            await state.clear()

        if not selected_item:
            selected_item = await get_new_item(state)
            if not selected_item:
                await callback.message.delete()
                await callback.message.answer("‚ùå The item was purchased by another user.")
                await state.clear()
                return

        if curr_user.balance < selected_item.price:
            await callback.message.answer("Insufficient funds to complete the purchase.")
            await callback.answer()
            return

        new_balance = curr_user.balance - selected_item.price
        new_bonus_balance = curr_user.bonus_balance

        await process_purchase(state, callback, new_balance, new_bonus_balance)

    @router.callback_query(F.data == "cancel_buying")
    async def cancel_buying(callback: types.CallbackQuery, state: FSMContext):

        await callback.message.delete()
        await state.clear()